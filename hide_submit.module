<?php
// $Id$

/**
 * @file
 * Hide the submit button after clicked to prevent/reduce duplicate postings.
 * 
 * Using a small jQuery snippet, this module will hide submit buttons
 * afted clicked to prevent/reduce duplicate postings.
 * A message and a nice loader animation will be displayed
 * So the user will know its request is being processed
 */

define('HIDE_SUBMIT_IN_CONTENT_ADD_EDIT', 0);
define('HIDE_SUBMIT_IN_ALL_PAGES',        1);
define('HIDE_SUBMIT_IN_SELECTED_PAGES',   2);

define('DEFAULT_JS_LOAD', HIDE_SUBMIT_ON_CONTENT_ADD_EDIT);
define('HIDE_SUBMIT_DEFAULT_MESSAGE', t("Please wait...") );
define('HIDE_SUBMIT_DEFAULT_IMAGE', drupal_get_path('module', 'hide_submit') .'/loader.gif');

/**
 * Implementation of hook_help().
 */

/**
 * Implementation of hook_menu
 */
function hide_submit_menu() {
  $items = array();

  $items['admin/settings/hide-submit'] = array(
    'title' => 'Hide Submit',
    'description' => 'Configure hide submit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hide_submit_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );
  
  return $items;
}

/**
 * Implementation of hook_init
*/
function hide_submit_init() {

  _hide_submit_load_js();
}

/**
 * Check if JS should be loaded for current page
*/
function _hide_submit_load_js() {

    static $hide_submit_js_loaded = false;
    
    if ($hide_submit_js_loaded)
        return TRUE;
    
    $js_load_option = variable_get('hide_submit_js_load_option', DEFAULT_JS_LOAD);

    switch ($js_load_option) {
        case HIDE_SUBMIT_IN_ALL_PAGES:
            return TRUE;
        case HIDE_SUBMIT_IN_SELECTED_PAGES:
            $pages = variable_get('hide_submit_js_load_pages', '');
            break;
        case HIDE_SUBMIT_IN_CONTENT_ADD_EDIT:
        default:
            $pages = "node/add/*\r\nnode/*/edit";
            break;
    }
    
    $pages .= "\r\nadmin/settings/hide-submit";
    
    $path = drupal_get_path_alias($_GET['q']);
    $regexp = '/^('. preg_replace(array('/(\r\n?|\n)/', '/\\\\\*/', '/(^|\|)\\\\<front\\\\>($|\|)/'), array('|', '.*', '\1'. preg_quote(variable_get('site_frontpage', 'node'), '/') .'\2'), preg_quote($pages, '/')) .')$/';
    // Compare with the internal and path alias (if any).
    $page_match = preg_match($regexp, $path);

    if ($path != $_GET['q']) {
      $page_match = $page_match || preg_match($regexp, $_GET['q']);
    }
    
    if ($page_match == 1) {
        drupal_add_css (drupal_get_path('module', 'hide_submit') .'/hide-submit.css', 'module', 'all', FALSE);
        $js = _hide_submit_get_javascript();
        drupal_add_js($js, 'inline', 'header');
        $hide_submit_js_loaded = TRUE;
        return TRUE;
    }
    
    return FALSE;
}

/**
* Implementation of hook_theme().
*/
function hide_submit_theme() {
  return array(
    'hide_submit_preview' => array(
       'arguments' => array(),
    )
  );
}

/**
* 
*/

function theme_hide_submit_preview($element) {
    return filter_xss_admin ( _hide_submit_clean_for_javascript( _hide_submit_get_message() ) );
}

/**
 * Implementation of admin_settings callback
*/

function hide_submit_admin_settings() {

  $form = array();

  $form['hide_submit_fieldset_preview'] = array(
    '#type' => 'fieldset',
    '#title' => t('Preview'),
    '#collapsible' => FALSE,
  );

  $form['hide_submit_fieldset_preview']['preview'] = array(
    '#title' => t('Preview'),
    '#theme' => 'hide_submit_preview',
    '#collapsible' => TRUE,
    '#description' => t("The message to print after submit is clicked and the button become invisible. i.e. Please wait.."),
  );

  $form['hide_submit_fieldset_message'] = array(
    '#type' => 'fieldset',
    '#title' => t('Display options'),
    '#collapsible' => TRUE,
    '#description' => t("The message to print after submit is clicked and the button become invisible. i.e. Please wait.."),
  );

  $form['hide_submit_fieldset_message']['hide_submit_message'] = array(
    '#type' => 'textarea',
    '#title' => t('Default Message'),
    '#rows' => 2,
    '#default_value' => variable_get('hide_submit_message', HIDE_SUBMIT_DEFAULT_MESSAGE ),
  );
  
  $form['hide_submit_fieldset_message']['hide_submit_image'] = array(
    '#type' => 'textfield',
    '#title' => t('Image or animation'),
    '#default_value' => variable_get('hide_submit_image', HIDE_SUBMIT_DEFAULT_IMAGE ),
    '#description' => t("A link to an image, this image will be added to message.."),
  );
  
  $form['hide_submit_fieldset_message']['fieldset_locale'] = array(
    '#type' => 'fieldset',
    '#title' => t('Localization'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  
  $languages = language_list('language', TRUE);
  foreach ($languages as $langcode => $language) {
    if ($language->enabled) {
      $msg_for_language = 'hide_submit_message_'.$langcode;
      $form['hide_submit_fieldset_message']['fieldset_locale'][$msg_for_language] = array(
        '#type' => 'textarea',
        '#rows' => 2,
        '#title' => check_plain($language->native),
        '#default_value' => variable_get($msg_for_language,""),
      );
    }
  }
    
  /*$form['hide_submit_display_settings']['hide_submit_message'] = array(
    '#type' => 'textarea',
    '#title' => t('Message'),
    '#default_value' => variable_get('hide_submit_message',""),
    '#description' => t("The message to print after hiding the submit button. i.e. Please wait... ."),
  );*/
  
  $form['hide_submit_fieldset_js_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Load options'),
    '#collapsible' => TRUE,
  );

  $form['hide_submit_fieldset_js_settings']['hide_submit_js_load_option'] = array(
    '#type' => 'radios',
    '#title' => t('Javascript load options'),
    '#default_value' => variable_get('hide_submit_js_load_option', DEFAULT_JS_LOAD),
    '#options' => array(0 => t('Add/Edit node pages only'), 1 => t('Every page'), 2 => t('Page list')),
    '#description' => t("Add/Edit node view will load for pages with url '/node/add'.  Every page, is well, EVERY PAGE.  Page list will use the list below."),
  );
  $form['hide_submit_fieldset_js_settings']['hide_submit_js_load_pages'] = array(
      '#type' => 'textarea',
      '#title' => t('Page list'),
      '#default_value' => variable_get('hide_submit_js_load_pages', ''),
      '#description' => t("Enter one page per line as Drupal paths. The '*' character is a wildcard. Example paths are %blog for the blog page and %blog-wildcard for every personal blog. %front is the front page.", array('%blog' => 'blog', '%blog-wildcard' => 'blog/*', '%front' => '<front>')),
  );

  return system_settings_form($form);
}


/**
 * scrub the format strings for things that make bad javascript.
 *
 * @param $format_string
 * @return
 *   cleaned $format_string
 */
function _hide_submit_clean_for_javascript($format_string='') {
  $patterns =      array('/\n/', '/\r/', '/\'/');
  $replacements = array('<br/>', '', '`' );
  return preg_replace($patterns, $replacements, $format_string);
}


/**
* Get javascript code for injection
*/

function _hide_submit_get_message() {

  global $language;
  
  $message = variable_get('hide_submit_message_'.$language->language, "" );
  if ( $message == "" ) {
       $message = variable_get('hide_submit_message', HIDE_SUBMIT_DEFAULT_MESSAGE);
  }
  
  
  $image =  variable_get('hide_submit_image', HIDE_SUBMIT_DEFAULT_IMAGE ); 
  
  if ($image != "")
      $image = theme_image($image).'&nbsp;';
  
  return  "<p class='hide_submit'> $image $message </p>";
}

/**
* Get javascript code for injection
*/

function _hide_submit_get_javascript() {
    
    $message = filter_xss_admin ( _hide_submit_clean_for_javascript( _hide_submit_get_message() ) );
    $image = check_plain ( variable_get("hide_submit_image",HIDE_SUBMIT_DEFAULT_IMAGE) ); 
  
  
  $ouput = <<<JAVASCRIPT_CODE
jQuery("<img>").attr("src",'/$image');
$(document).ready(function() {
  $('input:submit').click(function() {
      $(this).siblings('input:submit').hide();            
      $(this).hide();      
      $('$message').insertAfter(this).slideDown('fast');                 
  })  
})
JAVASCRIPT_CODE;

  return $ouput;
}
